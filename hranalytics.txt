import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.ensemble import GradientBoostingClassifier

data = pd.read_csv("E:/hr/trainhr.csv")
test = pd.read_csv("E:/hr/testhr.csv")

import statistics
data['education'] = data['education'].replace(np.NaN, statistics.mode(data['education']))
data['previous_year_rating'] = data['previous_year_rating'].replace(np.NaN, statistics.mode(data['previous_year_rating']))

data.department = data.department.replace(['Sales & Marketing', 'Operations', 'Technology', 'Analytics',
       'R&D', 'Procurement', 'Finance', 'HR', 'Legal'], [1,2,3,4,5,6,7,8,9])
data.education = data.education.replace(["Master's & above", "Bachelor's", 'Below Secondary'], [3,2,1])
data.gender = data.gender.replace(['f','m'], [1,2])

test.department = test.department.replace(['Sales & Marketing', 'Operations', 'Technology', 'Analytics',
       'R&D', 'Procurement', 'Finance', 'HR', 'Legal'], [1,2,3,4,5,6,7,8,9])
test.education = test.education.replace(["Master's & above", "Bachelor's", 'Below Secondary'], [3,2,1])
test.gender = test.gender.replace(['f','m'], [1,2])

bins = [0,20,30,40,50,60,70]
labels = [0,25,35,45,55,65]
data.age = pd.cut(data.age, bins=bins, labels=labels)
test.age = pd.cut(test.age, bins=bins, labels=labels)

data = data.drop(['region','employee_id','recruitment_channel'], axis=1)
test = test.drop(['region','employee_id','recruitment_channel'], axis=1)
test['previous_year_rating'] = test['previous_year_rating'].replace(np.NaN, statistics.mode(test['previous_year_rating']))
test['education'] = test['education'].replace(np.NaN, statistics.mode(test['education']))

trainx = data.iloc[:,:10]
trainy = data.iloc[:,10]
clf = RandomForestClassifier(n_estimators=100, 
                            bootstrap = True,
                            max_features = 'log2',
                            min_samples_leaf=1,
                            n_jobs = -1,
                            random_state=50,
                            oob_score = True)

clf.fit(trainx,trainy)

pred = clf.predict(trainx)
print(accuracy_score(trainy,pred))
pred1 = clf.predict(test)
print(pred1)

testx = pd.read_csv("E:/hr/testhr.csv")
excel = pd.DataFrame()
excel['employee_id']=testx.employee_id
excel['is_promoted']=pred1
excel.to_csv('submit_hr9.csv',index=False)

